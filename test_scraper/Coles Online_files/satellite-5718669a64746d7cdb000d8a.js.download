// Smart DataLayer
Number.prototype.pad = function(size) {
  var s = String(this);
  while (s.length < (size || 2)) {
    s = "0" + s;
  }
  return s;
}

window.dl = (function() {

  var sdl = {
    data: {},
    last_search: '',
    att_check: false,
    trolley_section: '',
    contents: {},
    products: {},
    restricted_products: [],
    trolley_timer: null,
    trolley_clear_timeout: 3000,
    pos: 0,
    max: 0,

    utils: {
      order: {
        window: 14, // days before old order data is removed
        oc_dedup: 1, // period in minutes after which a modified order index will be incremented on the order confirmation page
        set: function(id, order, mod_date) {
          localStorage['order_' + id] = JSON.stringify({
            order: order,
            date: mod_date
          });
        },
        get: function(id) {
          var order = localStorage['order_' + id];
          return (order ? JSON.parse(order) : order);
        },
        tidy: function() {
          for (k in localStorage) {
            if (k.match(/^order_/)) {
              var order = JSON.parse(localStorage[k]);
              if (order.date && (Date.now() - order.date > analytics.utils.order.window * 86400000))
                localStorage.removeItem(k);
            }
          }
        },
        remove: function(id) {
          localStorage.removeItem('order_' + id);
        }
      }
    },

    h: function(e) {
      "use strict";var sjcl={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(a){this.toString=function(){return"CORRUPT: "+this.message};this.message=a},invalid:function(a){this.toString=function(){return"INVALID: "+this.message};this.message=a},bug:function(a){this.toString=function(){return"BUG: "+this.message};this.message=a},notReady:function(a){this.toString=function(){return"NOT READY: "+this.message};this.message=a}}};
        if(typeof module!="undefined"&&module.exports)module.exports=sjcl;
        sjcl.bitArray={bitSlice:function(a,b,c){a=sjcl.bitArray.g(a.slice(b/32),32-(b&31)).slice(1);return c===undefined?a:sjcl.bitArray.clamp(a,c-b)},extract:function(a,b,c){var d=Math.floor(-b-c&31);return((b+c-1^b)&-32?a[b/32|0]<<32-d^a[b/32+1|0]>>>d:a[b/32|0]>>>d)&(1<<c)-1},concat:function(a,b){if(a.length===0||b.length===0)return a.concat(b);var c=a[a.length-1],d=sjcl.bitArray.getPartial(c);return d===32?a.concat(b):sjcl.bitArray.g(b,d,c|0,a.slice(0,a.length-1))},bitLength:function(a){var b=a.length;
        if(b===0)return 0;return(b-1)*32+sjcl.bitArray.getPartial(a[b-1])},clamp:function(a,b){if(a.length*32<b)return a;a=a.slice(0,Math.ceil(b/32));var c=a.length;b&=31;if(c>0&&b)a[c-1]=sjcl.bitArray.partial(b,a[c-1]&2147483648>>b-1,1);return a},partial:function(a,b,c){if(a===32)return b;return(c?b|0:b<<32-a)+a*0x10000000000},getPartial:function(a){return Math.round(a/0x10000000000)||32},equal:function(a,b){if(sjcl.bitArray.bitLength(a)!==sjcl.bitArray.bitLength(b))return false;var c=0,d;for(d=0;d<a.length;d++)c|=
        a[d]^b[d];return c===0},g:function(a,b,c,d){var e;e=0;if(d===undefined)d=[];for(;b>=32;b-=32){d.push(c);c=0}if(b===0)return d.concat(a);for(e=0;e<a.length;e++){d.push(c|a[e]>>>b);c=a[e]<<32-b}e=a.length?a[a.length-1]:0;a=sjcl.bitArray.getPartial(e);d.push(sjcl.bitArray.partial(b+a&31,b+a>32?c:d.pop(),1));return d},i:function(a,b){return[a[0]^b[0],a[1]^b[1],a[2]^b[2],a[3]^b[3]]}};
        sjcl.codec.utf8String={fromBits:function(a){var b="",c=sjcl.bitArray.bitLength(a),d,e;for(d=0;d<c/8;d++){if((d&3)===0)e=a[d/4];b+=String.fromCharCode(e>>>24);e<<=8}return decodeURIComponent(escape(b))},toBits:function(a){a=unescape(encodeURIComponent(a));var b=[],c,d=0;for(c=0;c<a.length;c++){d=d<<8|a.charCodeAt(c);if((c&3)===3){b.push(d);d=0}}c&3&&b.push(sjcl.bitArray.partial(8*(c&3),d));return b}};
        sjcl.codec.hex={fromBits:function(a){var b="",c;for(c=0;c<a.length;c++)b+=((a[c]|0)+0xf00000000000).toString(16).substr(4);return b.substr(0,sjcl.bitArray.bitLength(a)/4)},toBits:function(a){var b,c=[],d;a=a.replace(/\s|0x/g,"");d=a.length;a+="00000000";for(b=0;b<a.length;b+=8)c.push(parseInt(a.substr(b,8),16)^0);return sjcl.bitArray.clamp(c,d*4)}};sjcl.hash.sha256=function(a){this.d[0]||this.h();if(a){this.c=a.c.slice(0);this.b=a.b.slice(0);this.a=a.a}else this.reset()};sjcl.hash.sha256.hash=function(a){return(new sjcl.hash.sha256).update(a).finalize()};
        sjcl.hash.sha256.prototype={blockSize:512,reset:function(){this.c=this.f.slice(0);this.b=[];this.a=0;return this},update:function(a){if(typeof a==="string")a=sjcl.codec.utf8String.toBits(a);var b,c=this.b=sjcl.bitArray.concat(this.b,a);b=this.a;a=this.a=b+sjcl.bitArray.bitLength(a);for(b=512+b&-512;b<=a;b+=512)this.e(c.splice(0,16));return this},finalize:function(){var a,b=this.b,c=this.c;b=sjcl.bitArray.concat(b,[sjcl.bitArray.partial(1,1)]);for(a=b.length+2;a&15;a++)b.push(0);b.push(Math.floor(this.a/
        4294967296));for(b.push(this.a|0);b.length;)this.e(b.splice(0,16));this.reset();return c},f:[],d:[],h:function(){function a(e){return(e-Math.floor(e))*0x100000000|0}var b=0,c=2,d;a:for(;b<64;c++){for(d=2;d*d<=c;d++)if(c%d===0)continue a;if(b<8)this.f[b]=a(Math.pow(c,0.5));this.d[b]=a(Math.pow(c,1/3));b++}},e:function(a){var b,c,d=a.slice(0),e=this.c,n=this.d,l=e[0],f=e[1],h=e[2],j=e[3],g=e[4],k=e[5],i=e[6],m=e[7];for(a=0;a<64;a++){if(a<16)b=d[a];else{b=d[a+1&15];c=d[a+14&15];b=d[a&15]=(b>>>7^b>>>18^
        b>>>3^b<<25^b<<14)+(c>>>17^c>>>19^c>>>10^c<<15^c<<13)+d[a&15]+d[a+9&15]|0}b=b+m+(g>>>6^g>>>11^g>>>25^g<<26^g<<21^g<<7)+(i^g&(k^i))+n[a];m=i;i=k;k=g;g=j+b|0;j=h;h=f;f=l;l=b+(f&h^j&(f^h))+(f>>>2^f>>>13^f>>>22^f<<30^f<<19^f<<10)|0}e[0]=e[0]+l|0;e[1]=e[1]+f|0;e[2]=e[2]+h|0;e[3]=e[3]+j|0;e[4]=e[4]+g|0;e[5]=e[5]+k|0;e[6]=e[6]+i|0;e[7]=e[7]+m|0}}; 

      return (sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(e)));
    },

    log: function(message, o) {
      window.console && console.log('SDL: ', message, (o == undefined ? '' : o));
    },

    exception: function(e) {
      sdl.log('Exception', e);
      ga('send', 'event', 'JavaScript', 'Analytics Swiftshop Exception', e.message);
    },

    get_var: null,

    db_date: function(d) {
      if (!d) return null;
      var date = [d.getFullYear(), (d.getMonth() + 1).pad(2), d.getDate().pad(2)]
      return (date.join('/'));
    },
    
    map_store_name: function(store_context, name) {
      var store_name = name;
      store_name = (store_context.keyword == null && store_context.catalogue.length == 0) && store_context.name.match(/^Everything$/) && store_name.match(/^Everything$/) ? 'Homepage' : store_name;
      return store_name;   
    },

    get_property: function(k) {
      var v = _satellite.getObjectProperty(sdl.data, k) == undefined ? '' : _satellite.getObjectProperty(sdl.data, k);
      return (v)
    },

    get_products: function() {
      return sdl.products
    },

    get_restricted_products: function() {
      return sdl.restricted_products
    },

    get_contents: function() {
      return sdl.contents
    },

    get_modified_order: function(id) {
      return sdl.utils.order.get(id)
    },

    storage_available: function(type) {
      try {
        var storage = window[type],
        x = '__storage_test__';
        storage.setItem(x, x);
        storage.removeItem(x);
        return true;
      }
      catch(e) {
        sdl.exception(e);
        return e instanceof DOMException && (
        // everything except Firefox
        e.code === 22 ||
        // Firefox
        e.code === 1014 ||
        // test name field too, because code might not be present
        // everything except Firefox
        e.name === 'QuotaExceededError' ||
        // Firefox
        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&
        // acknowledge QuotaExceededError only if there's something already stored
        storage.length !== 0;
      }
    },

    clear_vars: function() {
      if (window.s) {
        for (p in window.s) {
          if (p.match(/^(events|products|eVar|prop|list|campaign)/))
            window.s.clearVars(p);
        }
      }
    },

    tracking_beacon: function(src){
      var b = document.createElement('img');
      b.src = src;
      b.style.cssText = 'width:1px; height:1px; border:0px; display:none'; 
      document.body.appendChild(b);
    },

    find_href_params: function(id, parameter) {
      var pids=[];
      _satellite.cssQuery('#'+id+' [href*="'+parameter+'="]', function(links){
         _satellite.each(links, function(link){
           var pid = link.getAttribute('href').match(new RegExp(parameter+'=([^&$]+)', 'i'));
           if (pid && pid.length==2)
             pids.push(pid[1]);
         });
      });    
      return(pids);
    },

    add_content_rec: function(event, tiles) {
      _satellite.each((tiles ? tiles : []), function(t) {
        if (t.type == 'content-rec') {
          var pids = sdl.find_href_params(t.element_id, 'pid');
          _satellite.each((pids.length==0 ? [t.name] : pids), function(name){
            sdl.contents[name] = {
              name: name,
              size: t.size,
              event: event
            };
          });
        }
      });
    },

    add_tile_products: function(event, store_context, tiles, trolley_context) {
      _satellite.each((tiles ? tiles : []), function(t) {
        _satellite.each((t.products ? t.products : []), function(p) {
          var key = p.sku+'-'+t.element_id;
          sdl.products[key] = {
            name: t.name,
            call_outs: t.call_outs,
            feature_spot: t.type,
            price_promo: t.price_promo,
            position: t.position,
            element_id: t.element_id,
            sku: p.sku,
            bb_count: p.bb_count,
            quantity: p.quantity,
            out_of_stock: p.out_of_stock,
            price: p.price,
            size: t.size,
            order_id: t.order_id,
            event: event
          };
          if (t.espot_title) {
            sdl.products[key]['feature_spot'] = t.espot_title;
          }          
          if (p.associated_product!=undefined) {
            if (p.associated_product.direction.match('to')) {
              sdl.products[key]['feature_spot'] = "product-assoc";  
            }
          }
          if (store_context) {
            sdl.products[key]['store_context'] = store_context;
          }
          if (trolley_context) {
            sdl.products[key]['trolley_context'] = trolley_context;
          }
        });
      });
    },

    add_products: function(products) {
      _satellite.each((products ? products : []), function(p) {
        sdl.products[p.sku] = {
          sku: p.sku
          };      
        });
    },

    add_ordered_products: function(d, products, id, modified_order) {
      var skus = [],
        prices = [],
        quantities = [],
        mod_date = Date.now()

      _satellite.each((products ? products : []), function(p) {
        skus.push(p.sku);
        prices.push(p.price);
        quantities.push(p.quantity);
      });

      purchase = {
        id: id,
        mod_count: modified_order ? modified_order.order.mod_count : 0,
        skus: skus.join(';'),
        prices: prices.join(';'),
        quantities: quantities.join(';')
      }
    },

    track: function(event) {
      _satellite.track(event);
    },

    process: function(d) {
      _satellite.notify('DataLayer Event Detected: ' + d.event, 1);
      sdl.log('processing', d);
      _satellite.setVar("failed_search", "");
      if (!d.event.match(/trolley_clear/))
        _satellite.setVar('dl_event', d.event);
      
      sdl.data = {};
      switch (d.event) {
        case 'delivery_restrictions':
          sdl.restricted_products = d.product;
          sdl.data = d;
          sdl.track('delivery_restrictions');
          break;
          
        case 'start_modify_order':
          // Moved to order confirmation event so ignore 
          break; 

        case 'order_confirmation':
          sdl.data = d;
          var storage_check = sdl.storage_available('localStorage');
          if (storage_check) {
            var id = d.trolley_context.order_id,
            modified_order = sdl.utils.order.get(id),
            mod_date = Date.now();
            
            // Process start modified order
            if (modified_order) {
              ++modified_order.order.mod_count;
              sdl.utils.order.set(id, modified_order.order, mod_date);
              sdl.track('start_modify_order');
              sdl.clear_vars();
            }
          
            // Process original or modified order
            sdl.modified_order = modified_order;
            sdl.add_ordered_products(d, d.products, id, modified_order);
            sdl.utils.order.set(id, purchase, mod_date);
          }
          
          sdl.track('order_confirmation');
          sdl.track('order_confirmation_media_tags');
          break;

        case 'error':
          _satellite.setVar('error_content', d.error);
          _satellite.setVar('error_url', d.url);
          sdl.data = d;
          sdl.track('error');
          break;

        case 'search_cc_location':
          sdl.data = d;
          sdl.track('search_cc_location');
          _satellite.setVar('search_cc_location', true);
          break;

        case 'cc_map_view':
          sdl.data = d;
          if(!_satellite.getVar('search_cc_location')) sdl.track('cc_map_view');
          _satellite.setVar('search_cc_location', false);
          break;

        case 'cc_add_filters':
          sdl.data = d;
          sdl.track('cc_manage_filters');
          break;

        case 'ds_changed':
          sdl.data = d;
          sdl.track('ds_sc');
          break;

        case 'ds_selected':
          sdl.data = d;
          sdl.track('ds_sc');
          break;

        case 'view_overlay':
        case 'have_you_forgotten':
          _satellite.each(d.product_collection, function(collection) {
            sdl.add_tile_products(d.event, d.event + ':' + collection.name, collection.tiles, d.trolley_context);
          });
          sdl.data = d;
          sdl.track('view_overlay');
          if (d.event == 'have_you_forgotten') _satellite.setVar('have_you_forgotten_products', sdl.products);
          sdl.products = {}
          break;

        case 'add_to_trolley':
          _satellite.setVar('trolley_context', d.trolley_context);
          _satellite.setVar('store_context', d.store_context);
          sdl.trolley_section = d.trolley_context.section;
          sdl.att_check = true;
          if (sdl.trolley_timer)
            clearTimeout(sdl.trolley_timer);
          if (sdl.trolley_section.match(/Store|Product Details|Promo/)) {
            var forgotten = _satellite.getVar('have_you_forgotten_products');
            var key  = d.tiles[0].products[0].sku + '-' + d.tiles[0].element_id;
            if (sdl.trolley_section.match(/Store/)) d.store_context.name = forgotten && forgotten[key] ? forgotten[key].store_context : d.store_context.name;
            sdl.add_tile_products(d.event, d.store_context, d.tiles, d.trolley_context);
            sdl.trolley_timer = setTimeout(function() {
              window.dl.process({
                'event': 'trolley_clear'
              })
            }, sdl.trolley_clear_timeout);
          } else {
            sdl.data = d;
            if (d.product) {
              sdl.track('add_to_trolley_non_store_product');
            }
            if (d.products) {
              sdl.add_products(d.products);
              sdl.track('add_to_trolley_non_store_products');
              sdl.products = {};
            }          
          }
          break;

        case 'trolley_clear':
          sdl.track('add_to_trolley_store');
          sdl.products = {};
          break;

        case 'navigate_promo':
          sdl.data = d;
          sdl.add_tile_products(d.event, null, d.tiles, null);
          sdl.add_content_rec(d.event, d.tiles);
          sdl.track(d.event);
          sdl.products = {};
          sdl.contents = {};
          break;


        case 'navigate_store':
          _satellite.setVar("last_search", '');
          if (sdl.last_search) {
            if (d.store_context.keyword) {
              if (d.store_context.keyword.entered != sdl.last_search && sdl.att_check == false) {
                _satellite.notify("last search: failed (different)");
                _satellite.setVar("failed_search", "yes");
                _satellite.setVar("last_search", sdl.last_search);
              }
              if (d.store_context.keyword.entered != sdl.last_search && sdl.att_check == true) {
                _satellite.notify("last search: success (different)");
                sdl.att_check = false;
              }
            } else {
              if (sdl.att_check == false) {
                _satellite.notify("last search: failed (cleared)");
                _satellite.setVar("failed_search", "yes");
                _satellite.setVar("last_search", sdl.last_search);
                sdl.last_search = "";
              }
              if (sdl.att_check == true) {
                _satellite.notify("last search: success (cleared)");
                sdl.last_search = "";
                sdl.att_check = false;
              }
            }
          } else {
            sdl.att_check = false;
            _satellite.notify("last search: none");
          }

          _satellite.notify("last search 1: " + sdl.last_search);
          _satellite.notify("last search: flag - " + sdl.att_check);

          if (d.store_context.keyword)
            sdl.last_search = d.store_context.keyword.entered;
          _satellite.notify("last search 2: " + sdl.last_search);

          if (sdl.trolley_timer) {
            clearTimeout(sdl.trolley_timer);
            if (sdl.products.length > 0) {
              sdl.track('add_to_trolley');
              sdl.products = {};
            }
          }
          sdl.data = d;
          sdl.add_tile_products(d.event, d.store_context, d.store_results.tiles, null);
          sdl.add_content_rec(d.event, d.store_results.tiles);
          sdl.track(d.event);
          sdl.products = {};
          sdl.contents = {};
          break;

        case 'tile_click':
          sdl.data = d;
          var tile_array = [];
          tile_array.push(d.tile);
          sdl.add_tile_products(d.event, d.store_context, tile_array, null);
          sdl.track(d.event);
          sdl.contents = {};
          break;
        default:
          sdl.data = d;
          sdl.track(d.event);
      }
    },
    processing: false,
    init: function() {
      dataLayer = window.dataLayer || [];
      window.MAX_DATALAYER_LENGTH = 10;
      sdl.max = dataLayer.length;
      dataLayer.push = function() {
        try {
          if (arguments[0].event == 'registration') ga('send', 'event', 'Registration ', 'Smart DataLayer - Start', 'Swiftshop');
          if (arguments[0].event == 'order_confirmation') {
            ga('send', 'event', 'Debug', 'Order Confirmation', arguments[0].trolley_context.order_id);
            s.linkTrackVars = s.linkTrackVars+'events,eVar32,prop10'; 
            s.events = 'event300';
            s.eVar32 = arguments[0].trolley_context.order_id;
            s.prop10 = arguments[0].trolley_context.order_id; 
            s.tl(this,'o','Checkout - Debug Order Confirmation 0');
          }

          var result = Array.prototype.push.apply(this, arguments);
          sdl.max++;
          if (sdl.processing) {
            return result;
          }
          if (result > 0 && arguments != undefined && arguments.length > 0 && arguments[0].event) {
            sdl.clear_vars();
            while (sdl.max > sdl.pos) {
              sdl.processing = true
              window.dl.process(dataLayer[dataLayer.length == MAX_DATALAYER_LENGTH ? MAX_DATALAYER_LENGTH - 1 : sdl.pos]);
              sdl.pos++;
            }
          }
          sdl.processing = false;
          return result;
        } catch (e) {
          // If a dataLayer object causes an exception we need to reset the processing and discard the object.
          sdl.processing = false;
          sdl.pos++;
          sdl.exception(e);
        };
      }

      // Override _satellite.getVar() to include exception trapping
      sdl.get_var = _satellite.getVar;
      _satellite.getVar = function(v) {
        result = '';
        try {
          result = sdl.get_var(v);
        } catch (e) {
          e.message = 'Data Element: ' + v + '; ' + e.message;
          sdl.exception(e);
        }
        return (result);
      }
      while (sdl.max > sdl.pos) {
        window.dl.process(dataLayer[dataLayer.length == MAX_DATALAYER_LENGTH ? MAX_DATALAYER_LENGTH - 1 : sdl.pos]);
        sdl.pos++;
      }
      sdl.log('Initialised');
    }
  }

  return {
    process: sdl.process,
    get_property: sdl.get_property,
    h: sdl.h,
    get_products: sdl.get_products,
    get_contents: sdl.get_contents,
    get_restricted_products: sdl.get_restricted_products,
    get_modified_order: sdl.get_modified_order,
    db_date: sdl.db_date,
    tracking_beacon: sdl.tracking_beacon,
    map_store_name: sdl.map_store_name,
    init: sdl.init,
    exception: sdl.exception,
    storage_available: sdl.storage_available,
    clear_vars: sdl.clear_vars,
    data: function() {
      return sdl.data
    },
    tct: sdl.trolley_clear_timeout
  }
})();

setTimeout(function() {
  dl.init();
}, 3000);
